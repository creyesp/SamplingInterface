function [inf]=getInformation(input,nameFile,use)
%getInformation return information of experiment protocol
% en two formats for user data or print information.
%
% Example: 
%       getInformation(input) return struct with variable of experiment
%       getInformation(input,'print') return string with information for print


if ~exist('use','var'), use=0; end
if ~exist('nameFile','var'), use=''; end
handles = load(input,'-mat');
disp(nameFile)
inf = char(['File name: ' nameFile]);
if strcmp('print',use)
    if strcmp(handles.mode,'Presentation')
        inf = char(inf, ' ','Time of background: ', ' ',['Color [r,g,b]: [' ...
            num2str(handles.presentation.r) ',' num2str(handles.presentation.g)...
            ',' num2str(handles.presentation.b) ']'],['Time expected: '...
            num2str(handles.presentation.time) ' [ms]']);
    else
        inf = char(inf, ' ',['Mode: ' handles.mode]);
        if ~strcmp(handles.mode,'White noise')
            inf = char(inf,'',['Images directory: ' handles.img.directory],...
                ['Initial file: ' handles.img.nInitial],['Final file: ' handles.img.nFinal],...
                ['Number of files: ' num2str(handles.img.files)]);
            if handles.img.background.isImg
                inf = char(inf,['Image as frame background: ' handles.img.background.imgName]);
            else
                inf = char(inf,['Frame background [r,g,b]: [' num2str(handles.img.background.r) ','...
                num2str(handles.img.background.g) ',' num2str(handles.img.background.b) ']']);
            end
        end
        if handles.sync.is
            if handles.sync.isdigital 
                if strcmp(handles.sync.digital.mode,'On every frames'),
                    inf = char(inf, 'Digital Sync: Using output digital signal on every presented frame');
                else
                    inf = char(inf, 'Digital Sync: Using output digital signal only on the start and end of repetition');
                end
            elseif handles.sync.isSerial
                inf = char(inf, 'Serial Sync: Using output serial signal on every presented frame');
            else
                inf = char(inf, 'Analog Sync: Using output analog signal on every presented frame');
            end
%             inf = char(inf, ['Trigger enabled [' num2str(handles.sync.analog.r) ...
%                 ',' num2str(handles.sync.analog.g) ',' num2str(handles.sync.analog.b) ...
%                 '] position[' num2str(handles.sync.analog.posLeft) ',' ...
%                 num2str(handles.sync.analog.posTop) ',' num2str(handles.sync.analog.posRight) ...
%                 ',' num2str(handles.sync.analog.posBottom) '], base levels of ['...
%                 num2str(handles.sync.analog.baseR) ',' num2str(handles.sync.analog.baseG) ',' ...
%                 num2str(handles.sync.analog.baseB) '] and ' num2str(handles.sync.analog.division)...
%                 ' divisions']);
        else
            inf = char(inf, 'It does not synchronization');
        end
        if handles.beforeStimulus.is
            inf = char(inf, ' ',['Has image before stimulus with background color [r,b,g]: ['...
                num2str(handles.beforeStimulus.background.r) ',' ...
                num2str(handles.beforeStimulus.background.g) ',' ...
                num2str(handles.beforeStimulus.background.b) ']']);
            if handles.beforeStimulus.bar.is
                inf = char(inf,['Includes a bottom bar [r,b,g]: color[' ...
                    num2str(handles.beforeStimulus.bar.r) ',' ...
                    num2str(handles.beforeStimulus.bar.g) ',' ...
                    num2str(handles.beforeStimulus.bar.b) '] position[' ...
                    num2str(handles.beforeStimulus.bar.posLeft) ',' ...
                    num2str(handles.beforeStimulus.bar.posTop) ',' ...
                    num2str(handles.beforeStimulus.bar.posRight) ',' ...
                    num2str(handles.beforeStimulus.bar.posBottom) ']']);
            end
            if handles.beforeStimulus.rest
                inf = char(inf,['Time of presentation: ' ...
                    num2str(handles.beforeStimulus.time) ...
                    ' [ms] subtracted to the previous background']);
            else
                inf = char(inf,['Time of presentation: ' ...
                    num2str(handles.beforeStimulus.time) ...
                    ' [ms] not subtracted to the previous background']);
            end
        end
        %FLICKER
        if strcmp(handles.mode,'Flicker')
            inf = char(inf,' ','Flicker properties:',['Frequency: '...
                num2str(handles.flicker.fps) ' [hz]'],['Duty cicle: ' ...
                num2str(handles.flicker.dutyCicle) '%']);
            if handles.flicker.repeatBackground
                inf = char(inf, ['Image repetition: ' ...
                num2str(handles.flicker.repetitions) ', include the previous background protocol']);
            else
                inf = char(inf, ['Image repetition: ' ...
                num2str(handles.flicker.repetitions)]);
            end            
            if handles.flicker.img.is
                inf = char(inf,['Background image: ' handles.flicker.img.name]);
            else
                inf = char(inf,['Background color: ['...
                num2str(handles.flicker.r) ',' num2str(handles.flicker.g) ','...
                num2str(handles.flicker.b) ']']);
            end
            inf = char(inf,' ',['Total time expected: ' ...
                datestr(datenum(0,0,0,0,0,handles.flicker.time),'HH:MM:SS.FFF')]);
        %ONLY STIMULUS    
        elseif strcmp(handles.mode,'Only stimulus (fps)'),
            inf = char(inf,' ','Only Stimulus properties:',['Frames per second: '...
                num2str(handles.onlyStimulus.fps)]);
            if handles.onlyStimulus.repeatBackground
                inf = char(inf, ['Image repetition: ' ...
                num2str(handles.onlyStimulus.repetitions) ', include the previous background protocol']);
            else
                inf = char(inf, ['Image repetition: ' ...
                num2str(handles.maskStimulus.repetitions)]);
            end
            inf = char(inf,' ',['Total time expected: ' ...
            datestr(datenum(0,0,0,0,0,handles.onlyStimulus.time),'HH:MM:SS.FFF')]);
        %WHITE NOISE
        elseif strcmp(handles.mode,'White noise'),
            inf = char(inf,' ','White noise properties:',['Frames per second: '...
                num2str(handles.whitenoise.fps)],['Frame blocks: ' ...
                num2str(handles.whitenoise.blocks)],['Pixels per block, X axis: ' ...
                num2str(handles.whitenoise.pxX)],['Pixels per block, Y axis: ' ...
                num2str(handles.whitenoise.pxY)]);

            switch handles.whitenoise.type,
                case 'BW', inf = char(inf, 'Used black and white white noise');
                case 'BB', inf = char(inf, 'Used black and blue white noise');
                case 'BG', inf = char(inf, 'Used black and green white noise');
                case 'BC', inf = char(inf, 'Used black and cyan white noise');
                case 'BBGC', inf = char(inf, 'Used black, green, blue and cyan white noise');
                case 'BY', inf = char(inf, 'Used black and yellow white noise');
                case 'BLG', inf = char(inf, 'Used blue and green white noise');
                otherwise, inf = char(inf, 'Used black and white white noise');
            end

            inf = char(inf,' ',['Total time expected: ' ...
            datestr(datenum(0,0,0,0,0,handles.whitenoise.time),'HH:MM:SS.FFF')]);
        %MASK STIMULUS
        elseif strcmp(handles.mode,'Mask stimulus'),
            inf = char(inf,' ','Mask Stimulus properties:',['Frames per second: '...
                num2str(handles.maskStimulus.fps)]);
            if handles.maskStimulus.repeatBackground
                inf = char(inf,' ', ['Image repetition: ' ...
                num2str(handles.maskStimulus.repetitions) ', include the previous background protocol']);
            else
                inf = char(inf,' ', ['Image repetition: ' ...
                num2str(handles.maskStimulus.repetitions)]);
            end
            
            switch handles.maskStimulus.protocol.type
                case 'Flicker'
                    inf = char(inf,' ', 'Protocol type: Flicker',...
                        ['Duty Cicle: ' num2str(handles.maskStimulus.protocol.flicker.dutyCycle)], ...
                        ['Period: ' num2str(handles.maskStimulus.protocol.flicker.periodo)]);
                otherwise
                    inf = char(inf,' ', 'Protocol type: Images');
            end
            
            switch handles.maskStimulus.mask.type
                case 'White noise'
                    inf = char(inf,' ', 'Mask type: White noise',...
                        ['Frame blocks: '  num2str(handles.maskStimulus.mask.wn.blocks)],...
                        ['Pixels per block, X axis: ' num2str(handles.maskStimulus.mask.wn.pxX)], ...
                        ['Pixels per block, Y axis: ' num2str(handles.maskStimulus.mask.wn.pxY)], ...
                        ['Number images saved: ' num2str(handles.maskStimulus.mask.wn.saveImages)], ...
                        ['Pixel intensity [R G B]: ' num2str(handles.maskStimulus.mask.wn.intensity)]);
                    switch handles.maskStimulus.mask.wn.type
                        case 'BW', inf = char(inf, 'Used black and white white noise');
                        case 'BB', inf = char(inf, 'Used black and blue white noise');
                        case 'BG', inf = char(inf, 'Used black and green white noise');
                        case 'BC', inf = char(inf, 'Used black and cyan white noise');
                        case 'BBGC', inf = char(inf, 'Used black, green, blue and cyan white noise');
                        case 'BY', inf = char(inf, 'Used black and yellow white noise');
                        case 'BLG', inf = char(inf, 'Used blue and green white noise');
                        otherwise, inf = char(inf, 'Used black and white white noise');
                    end
                case 'Img'
                    inf = char(inf, 'Mask type: Image',...
                        ['Path images: ' handles.maskStimulus.mask.img.directory]);
                case 'Solid color'
                    inf = char(inf, 'Mask type: Solid Color');
                otherwise
                    inf = char(inf, 'Mask type: Undefined');
            end
            
            inf = char(inf,' ','Other option', ['Shape of the hole: ' num2str(handles.maskStimulus.mask.hole.shape)], ...
                ['Hole width: ' num2str(handles.maskStimulus.mask.hole.width*2-1) ' px'], ...
                ['Hole height: ' num2str(handles.maskStimulus.mask.hole.height*2-1) ' px'], ...
                ['Hole angle: ' num2str(round(mod(handles.maskStimulus.mask.hole.angle,360))) ' px'], ...
                ['X center: ' num2str(handles.maskStimulus.mask.hole.xcenter) ' px'], ...
                ['Y center: ' num2str(handles.maskStimulus.mask.hole.ycenter) ' px'], ...
                ['X spacing: ' num2str(handles.maskStimulus.mask.spacing.x) ' px'], ...
                ['Y spacing: ' num2str(handles.maskStimulus.mask.spacing.y) ' px'], ...
                ['X spacing repetition: ' num2str(handles.maskStimulus.mask.spacing.xrep)], ...
                ['Y spacing repetition: ' num2str(handles.maskStimulus.mask.spacing.yrep)], ...
                ['Inverse mask: ' num2str(handles.maskStimulus.mask.inverse)]);

            inf = char(inf,' ',['Total time expected: ' ...
            datestr(datenum(0,0,0,0,0,handles.maskStimulus.time),'HH:MM:SS.FFF')]);
        else
            inf = char(inf,' ','Mask Stimulus properties:',['Frames per second: '...
                num2str(handles.maskStimulus.fps)],['Image repetition: ' ...
                num2str(handles.maskStimulus.repetitions)]);
            inf = char(inf,' ',['Total time expected: ' ...
            datestr(datenum(0,0,0,0,0,handles.maskStimulus.time),'HH:MM:SS.FFF')]);
        end
    end
else
    inf = handles;
end
end
